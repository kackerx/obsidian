{
	"nodes":[
		{"type":"text","text":"## 通知型\n- 异步确保: 主要使用内部系统的最终一致性, 因为内部相对可控, 如订单, 购物车, 支付结算等\n- 最大努力: 主要是外部系统, 因为外部环境复杂, 第三方系统, 充值平台, 运营商, 支付对接","id":"2c9f1b52670e9c80","x":-680,"y":-360,"width":740,"height":140,"color":"6"},
		{"type":"text","text":"## 事务消息\n```ad-tips\n基于MQ的<mark class=\"hltr-pink\">半消息机制</mark>, 来实现投递消息和参与者本地事务的一致性保障, 原理借鉴2PC\n- 本地逻辑执行正确则通知MQ投递消息给下游执行, 本地执行回滚, 则通知MQ不投递\n```\n\n![[Pasted image 20230331160003.png]]\n- 生产者发送half msg给MQ, MQ响应成功才执行本地事务, 避免生产者和mq之间的网络问题\n- 收到mq的ack执行生产者本地事务, 执行成功发送commit, 失败rollback\n- 为避免第4步发送失败, mq会定时回查事务结果状态\n- 投递给下游消费者去执行本地事务, 完成后消息标记为已消费","id":"0d25751875f13c6d","x":100,"y":-360,"width":740,"height":640,"color":"4"},
		{"type":"text","text":"![[Pasted image 20230331161941.png]]","id":"ef75880c113be4d4","x":-680,"y":-200,"width":740,"height":480,"color":"6"},
		{"type":"text","text":"## 本地消息表\n![[Pasted image 20230331162207.png]]\n- 业务表和消息表由本地事务保证\n- 额外的投递线程进行事务消息投递到mq, 根据ack来删除消息表的记录\n- MQ定时扫描重发异常的消息\n- 消费者处理失败重试消息\n- 如果业务层面的失败要回滚, 给生产方发送一个业务补偿消息, 通知进行回滚\n","id":"485b215965cc8e3d","x":-680,"y":320,"width":740,"height":640,"color":"4"},
		{"type":"text","text":"### 消息表/事务消息 -> 优缺点\n![[Pasted image 20230331162952.png]]\n\n### 场景\n![[Pasted image 20230331163253.png|555]]","id":"546a9af789c6556d","x":100,"y":320,"width":740,"height":640,"color":"6"}
	],
	"edges":[]
}