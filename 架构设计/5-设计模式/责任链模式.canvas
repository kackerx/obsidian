{
	"nodes":[
		{"type":"text","text":"```go\ntype Handler interface {  \n   handle(u *User)  \n}\n```","id":"ce563293d14891d2","x":-21,"y":-450,"width":323,"height":80,"color":"6"},
		{"type":"text","text":"```go\ntype ProcessA struct {  \n}  \n  \nfunc (p *ProcessA) handle(u *User) {  \n   if u.Name == \"k\" {  \n      u.Name = \"kk\"  \n   }  \n}\n```","id":"9bed48bf9c9895e9","x":-280,"y":-224,"width":376,"height":194,"color":"1"},
		{"type":"text","text":"```go\ntype ProcessB struct {  \n}  \n  \nfunc (p *ProcessB) handle(u *User) {  \n   if u.Age == 27 {  \n      u.Age += 1  \n   }  \n}\n```","id":"b88e2e0a59a77bf4","x":219,"y":-224,"width":376,"height":194,"color":"1"},
		{"type":"text","text":"```go\n// HanderChain 职责链  \ntype HanderChain struct {  \n   Chains []Handler  \n}  \n  \n// AddProcessor 添加职责处理器  \nfunc (c *HanderChain) AddProcessor(p Handler) {  \n   c.Chains = append(c.Chains, p)  \n}  \n  \nfunc (c *HanderChain) Do(u *User) {  \n   for _, item := range c.Chains {  \n      item.handle(u)  \n   }}\n```","id":"d0a3c572ccd0a618","x":496,"y":-565,"width":489,"height":311,"color":"4"},
		{"type":"text","text":"```go\nfunc main() {  \n   chain := &HanderChain{}  \n   chain.AddProcessor(&ProcessA{})  \n   chain.AddProcessor(&ProcessB{})  \n  \n   u := &User{\"l\", 27}  \n   chain.Do(u)  \n  \n   fmt.Println(u)  \n}\n```","id":"1e6c7ff4638ca25d","x":-124,"y":40,"width":620,"height":239},
		{"id":"fc51249becc8ce50","x":-1020,"y":-240,"width":645,"height":980,"type":"text","text":"# 正常版本的责任链模式(next控制)\n```go\ntype QueryConditionHandler interface {\n    SetNext(handler QueryConditionHandler)\n    Handle(params map[string]string) string\n}\n\ntype BaseConditionHandler struct {\n    next QueryConditionHandler\n}\n\nfunc (h *BaseConditionHandler) SetNext(handler QueryConditionHandler) {\n    h.next = handler\n}\n\ntype Param1ConditionHandler struct {\n    BaseConditionHandler\n}\n\nfunc (h *Param1ConditionHandler) Handle(params map[string]string) string {\n    if val, ok := params[\"param1\"]; ok {\n        return \"WHERE param1 = \" + val\n    }\n\n    if h.next != nil {\n        return h.next.Handle(params)\n    }\n\n    return \"\"\n}\n\ntype Param2ConditionHandler struct {\n    BaseConditionHandler\n}\n\nfunc (h *Param2ConditionHandler) Handle(params map[string]string) string {\n    if val, ok := params[\"param2\"]; ok {\n        return \"AND param2 = \" + val\n    }\n\n    if h.next != nil {\n        return h.next.Handle(params)\n    }\n\n    return \"\"\n}\n\n// 添加更多的条件处理器...\n\nfunc ConstructSQLQuery(params map[string]string) string {\n    param1Handler := &Param1ConditionHandler{}\n    param2Handler := &Param2ConditionHandler{}\n\n    param1Handler.SetNext(param2Handler)\n\n    return param1Handler.Handle(params)\n}\n```"},
		{"type":"file","file":"0-asset/Pasted image 20230224110343.png","id":"db6e13dc03fca421","x":-855,"y":-740,"width":479,"height":232},
		{"type":"text","text":"### 责任链模式\n- 流程步骤不固定, 流程增加步骤时对修改关闭\n- 增加流程的扩展性, 医院看病流程, 购买优惠券流程等\n- 多个处理器都有机会处理这个请求(<mark class=\"hltr-pink\">依次</mark>)\n\t- A传给B, B传给C, 谁能处理就处理\n- 两种变体\n\t- 遇到符合条件的就返回不往下处理了\n\t- 全部处理器走一遍","id":"550dbde4277f8450","x":-855,"y":-481,"width":480,"height":222}
	],
	"edges":[
		{"id":"946283ca4c2d5fc8","fromNode":"9bed48bf9c9895e9","fromSide":"top","toNode":"ce563293d14891d2","toSide":"bottom"},
		{"id":"a93f8ecc54053686","fromNode":"b88e2e0a59a77bf4","fromSide":"top","toNode":"ce563293d14891d2","toSide":"bottom"},
		{"id":"cb17e767430cbadf","fromNode":"ce563293d14891d2","fromSide":"right","toNode":"d0a3c572ccd0a618","toSide":"left"}
	]
}