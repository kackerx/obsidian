{
	"nodes":[
		{"type":"text","text":"```ad-tip\n- adapter类依赖原始类并且实现目标接口\n- 目标接口的方法实现中, 使用原始类的原始方法\n```","id":"b5fabbc18831e243","x":-1140,"y":-600,"width":480,"height":160},
		{"type":"text","text":"## 使用场景\n- 接口不兼容的情况下使用, 类比电源适配器\n- 统一多个类的接口设计\n\t- 依赖多个类时, 实现一个统一的适配类, 统一的抽象方法\n- 替换依赖的外部系统\n\t- 本来依赖a的fa(), 替换使用b, 通过添加adapter类(依赖b), 实现fa()其中调用b的fb()\n- 兼容老版本接口\n- 适配不同类型数据","id":"ddb2cd3d4ab7a06e","x":-1340,"y":-380,"width":680,"height":340},
		{"id":"f26a4513e6215509","x":-580,"y":-600,"width":600,"height":560,"type":"text","text":"## Wrapper模式区别\n\n- 代理模式: 不改变原始类接口, 定义代理类, 实现控制访问, 而非加强功能\n- 桥接模式: 目的是接口和实现分离, 从而可以较为容易的, 相对独立的改变\n- 装饰模式: 不改变原始类接口, 对原始类功能进行增强, 支持多个装饰嵌套\n- 适配模式: 事后补救策略, 提供与原始类不同的接口, 适配目标接口"}
	],
	"edges":[]
}