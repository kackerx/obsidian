{
	"nodes":[
		{"type":"text","text":"## 双向非对称加密\n![[Pasted image 20230406150949.png]]\n- 包含两对动作, 签名和验签, 加密和解密\n- 私钥签名, 公钥验签, 防篡改\n- 公钥加密, 私钥解密, 防拦截, 中间人没私钥解密不了","id":"357f1137968efb91","x":-720,"y":-420,"width":600,"height":320},
		{"type":"text","text":"## 单向非对称加密\n![[Pasted image 20230406151257.png]]\n- 一般服务端没法验证客户端的合法性, 所以客户端->服务端是加密的, 返回明文\n- 这时就是用到密钥key, 客户端用服务端的公钥加密key, 中间人拦截没有服务端私钥无法获取key\n- 双方基于对称加密的key密钥通信\n![[Pasted image 20230406151625.png]]","id":"319d76211e2d9189","x":-720,"y":-60,"width":600,"height":540},
		{"type":"text","text":"## 中间人攻击\n![[Pasted image 20230406151815.png]]\n- 客户端和服务器都认为自己是和对方通信, 其实公钥交换都是和中间人交换\n- 解决这个问题得关键是<mark style=\"background: #FFB8EBA6;\">保证公钥传输的安全, 确保发给真实的对方</mark>, 数字证书和认证中心, 权威机构","id":"d1d0933e2707560c","x":-60,"y":-420,"width":880,"height":440},
		{"id":"86d0385d0ff9e4bb","x":-60,"y":60,"width":900,"height":740,"type":"text","text":"## ssl/tls 四次握手\n![[Pasted image 20230406152836.png]]\n- 第一个来回是公钥的传输和验证(数字证书), 第二个来回基于公钥协商出对称加密的秘钥"}
	],
	"edges":[]
}